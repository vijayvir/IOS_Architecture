{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 TrebuchetMS;}
{\colortbl;\red255\green255\blue255;\red32\green167\blue115;\red255\green255\blue255;\red255\green255\blue255;
\red0\green4\blue2;}
{\*\expandedcolortbl;\csgray\c100000;\cssrgb\c11373\c70196\c52549;\cssrgb\c100000\c100000\c100000;\csgray\c100000;
\cssrgb\c0\c1176\c784;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs56 \cf2 \cb3 \expnd0\expndtw0\kerning0
https://swifting.io/blog/2016/09/07/architecture-wars-a-new-hope/\
\
\
Singleton Pattern Defined\
\cb4 \

\b0\fs26 \cf5 \cb3 According to Wikipedia: "In software engineering, the singleton pattern is a design pattern that restricts the instantiation of a class to one object". If you've programmed in Objective-C before then you already know it interprets the "restricts" part of that definition loosely. There's no real way to make an object only be allowed to be a Singleton instance in Objective-C, and as far as I know the same holds true for Swift. It is your responsibility to know or to document that it is meant to be used as a singleton.\
\cb4 \
\
\cb3 A singleton is a global object and that one single instance can be referenced from any file. This pattern should only be used when it makes sense that there can only be 1 of that object. One example is the UIApplication singleton. There is only 1 application so this makes sense. Good use cases for the singleton pattern are usually when you need to manage something in particular throughout your app. I like to break out some of the complexity in the AppDelegate into its own singleton, like for the Core Data work I like to have a DataAccess singleton. I have found this pattern to be especially useful with a class that persists data or wrapping a framework that persists or syncs data from various places in the app. When you have multiple places in the app that need to update a central storage location then it could be a potential candidate. While singleton objects are generally frowned upon due to their global complexity they are also solving complexity issues when used correctly. Even Apple uses them for notifications, user defaults, and file management.
\fs36 \
\
\
}